name: 10 - Stats do push (em sequência)
on:
  push:
    branches: [ "main" ]

jobs:
  stats_seq:
    runs-on: ubuntu-latest
    steps:
      - name: Data/Hora (UTC)
        shell: bash
        run: |
          echo "Agora (UTC): $(date -u '+%Y-%m-%d %H:%M:%S')"

      - name: Usuário
        shell: bash
        run: |
          echo "github.actor: ${{ github.actor }}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Contar arquivos HTML/CSS/JS alterados no push
        id: counts
        shell: bash
        run: |
          set -euo pipefail

          BEFORE="${{ github.event.before }}"
          AFTER="${{ github.sha }}"

          # Garante que teremos uma lista de arquivos mesmo no primeiro commit/push
          if [ -n "$BEFORE" ] && [ "$BEFORE" != "0000000000000000000000000000000000000000" ]; then
            git diff --name-only "$BEFORE" "$AFTER" > changed.txt || true
          else
            git show --name-only --pretty="" "$AFTER" > changed.txt || true
          fi

          # Remove CR para evitar problemas no Linux runner
          tr -d '\r' < changed.txt > changed.clean && mv changed.clean changed.txt

          # Contagens robustas (grep -c). Se não houver match, ainda assim imprime 0.
          html=$(grep -E -c '\.html$' changed.txt || true)
          css=$(grep -E -c '\.css$'  changed.txt || true)
          js=$(grep -E -c '\.js$'    changed.txt || true)

          echo "Arquivos alterados (diff):"
          cat changed.txt || true
          echo "HTML: $html | CSS: $css | JS: $js"

          {
            echo "html=$html"
            echo "css=$css"
            echo "js=$js"
          } >> "$GITHUB_OUTPUT"

      - name: Exibir totais
        shell: bash
        run: |
          echo "HTML: ${{ steps.counts.outputs.html }}"
          echo "CSS:  ${{ steps.counts.outputs.css }}"
          echo "JS:   ${{ steps.counts.outputs.js }}"
